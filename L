#include<stdlib.h>
#include <stdio.h>
     
void create();
void display();
void insert_begin();
void insert_end();
void insert_pos();
void delete_begin();
void delete_end();
void delete_pos();
 
 
struct node
{
        int info;
        struct node *next;
};
struct node *start=NULL;
int main()     
{
        int choice;
        while(1){
               
                printf("\n 1.Create ");
                printf("\n 2.Display");
                printf("\n 3.Insert at the beginning    ");
                printf("\n 4.Insert at the end  ");
                printf("\n 5.Insert at specified position       ");
                printf("\n 6.Delete from beginning      ");
                printf("\n 7.Delete from the end        ");
                printf("\n 8.Delete from specified position     ");
                printf("\n 9.Exit       ");
                printf("\n Enter your choice:");
                scanf("%d",&choice);
                switch(choice)
                {
                        case 1:
                                        create();
                                        break;
                        case 2:
                                        display();
                                        break;
                        case 3: 
                                        insert_begin();
                                        break;
                        case 4:
                                        insert_end();
                                        break;
                        case 5:
                                        insert_pos();
                                        break;
                        case 6:
                                        delete_begin();
                                        break;
                        case 7:
                                        delete_end();
                                        break;
                        case 8:
                                        delete_pos();
                                        break;
                        
                        case 9:
                                        exit(0);
                                        break;
                             
                        default:
                                        printf("\n Wrong Choice:");
                                        break;
                }
        }
        return 0;
}
void create()
{
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\n Out of Memory Space:");
                exit(0);
        }
        printf("\n Enter the data value for the node:");
        scanf("%d",&temp->info);
        temp->next=NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                ptr=start;
                while(ptr->next!=NULL)
                {
                        ptr=ptr->next;
                }
                ptr->next=temp;
        }
}
void display()
{
        struct node *ptr;
        if(start==NULL)
        {
                printf("\n List is empty");
                return;
        }
        else
        {
                ptr=start;
                printf("\n The List elements are as follows \n");
                while(ptr!=NULL)
                {
                        printf("%d\t",ptr->info );
                        ptr=ptr->next ;
                }
        }
}
void insert_begin()
{
        struct node *temp;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\n Out of Memory Space:");
                return;
        }
        printf("\n Enter the data value for the node:" );
        scanf("%d",&temp->info);
        temp->next =NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                temp->next=start;
                start=temp;
        }
}
void insert_end()
{
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\n Out of Memory Space:");
                return;
        }
        printf("\n Enter the data value for the node:" );
        scanf("%d",&temp->info );
        temp->next =NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                ptr=start;
                while(ptr->next !=NULL)
                {
                        ptr=ptr->next ;
                }
                ptr->next =temp;
        }
}
void insert_pos()
{
        struct node *ptr,*temp;
        int i,pos;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\n Out of Memory Space:");
                return;
        }
        printf("\n Enter the position for the new node to be inserted:");
        scanf("%d",&pos);
        printf("\n Enter the data value of the node:");
        scanf("%d",&temp->info) ;
  
        temp->next=NULL;
        if(pos==0)
        {
                temp->next=start;
                start=temp;
        }
        else
        {
                for(i=0,ptr=start;i<pos-1;i++) { ptr=ptr->next;
                        if(ptr==NULL)
                        {
                                printf("\n Position not found:[Handle with care]");
                                return;
                        }
                }
                temp->next =ptr->next ;
                ptr->next=temp;
        }
}
void delete_begin()
{
        struct node *ptr;
        if(start==NULL)
        {
                printf("\n List is Empty");
                return;
        }
        else if(start->next=NULL)
        {
			ptr=start;
			free(ptr);
			start=NULL;
	   }
	   else
	   {
                ptr=start;
                start=start->next ;
                printf("\n The deleted element is :%d\t",ptr->info);
                free(ptr);
        }
}
void delete_end()
{
        struct node *temp,*ptr;
        if(start==NULL)
        {
                printf("\n List is Empty");
                exit(0);
        }
        else if(start->next ==NULL)
        {
                ptr=start;
                start=NULL;
                printf("\n The deleted element is:%d\t",ptr->info);
                free(ptr);
        }
        else
        {
                ptr=start;
                while(ptr->next!=NULL)
                {
                        temp=ptr;
                        ptr=ptr->next;
                }
                temp->next=NULL;
                printf("\n The deleted element is:%d\t",ptr->info);
                free(ptr);
        }
}
void delete_pos()
{
        int i,pos;
        struct node *temp,*ptr;
        if(start==NULL)
        {
                printf("\n The List is Empty:");
                exit(0);
        }
        else
        {
                printf("\n\Enter the position of the node to be deleted:");
                scanf("%d",&pos);
                if(pos==0)
                {
                        ptr=start;
                        start=start->next ;
                        printf("\n The deleted element is:%d\t",ptr->info  );
                        free(ptr);
                }
                else
                {
                        ptr=start;
                        for(i=0;i<pos;i++) { temp=ptr; ptr=ptr->next ;
                                if(ptr==NULL)
                                {
                                        printf("\n Position not Found:");
                                        return;
                                }
                        }
                        temp->next =ptr->next ;
                        printf("\n The deleted element is:%d\t",ptr->info );
                        free(ptr);
                }
        }
}




//postfix

#include<stdio.h>
#include<ctype.h>

char stack[100];
int top=-1,i=0;

void push(char x)
{
        stack[++top]=x;
}

char pop()
{
        if(top==-1)
                return -1;
        else
                return stack[top--];
                
}

int priority(char x)
{
        if(x=='(')
                return 0;
        if(x=='+'||x=='-')
                return 1; 
        if(x=='*'||x=='/')
                return 2;

        return 0;

        
}

int main()
{
        char exp[100],ex[100];
        char *e,x,y;
        int a,b,r;
        printf("Enter the expression:");
        scanf("%s",exp);
        printf("\n");
        e=exp;
        while(*e!='\0')
        {
                if(isalnum(*e))
                       ex[i++]=*e;
                
                else if(*e=='(')
                        push(*e);
                else if(*e==')')
                {
                        while((x=pop()) != '(' )
                        ex[i++]=x;
                }
                else
                {
                        while(priority (stack[top])>=priority(*e))
                              ex[i++]=pop();
                        push(*e);
                }
              e++;  
        }

        while(top!=-1)
        ex[i++]=pop();
        int j=0;
        printf("The postfix Expression is :")
        while(ex[j]!='\0')
        {
        printf("%c",ex[j]);
        j++;
        }
        printf("\n");
        


        for(i=0;ex[i]!= '\0';i++)
        {
                y=ex[i];
        if(isdigit(y))
        {
                x=y-48 ;
                push(x);
        }
        else 
        {      
                a=pop();
                b=pop();
                if(y=='+')
                {
                r=b+a;
                   
                }
                else if(y=='-')
                {
                r=b-a;
                 
                }
                else if(y=='*')
                {
                r=b*a;
                 
                }
                else
                {
                r=b/a;
                 
                }
                push(r);
        }
 
        } 
         printf(" \nResult=%d",r);
        
}
